type: edu
custom_name: stage4
files:
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import StageTest
    from hstest.test_case import TestCase
    from hstest.check_result import CheckResult

    import os
    import shutil

    import sys
    if sys.platform.startswith("win"):
        import _locale
        # pylint: disable=protected-access
        _locale._getdefaultlocale = (lambda *args: ['en_US', 'utf8'])

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)


    class TextBasedBrowserTest(StageTest):

        def generate(self):

            dir_for_files = 'tb_tabs'
            return [
                TestCase(
                    stdin='bloomberg.com\nbloomberg\nexit',
                    attach='Bloomberg',
                    args=[dir_for_files]
                ),
                TestCase(
                    stdin='nytimes.com\nnytimes\nexit',
                    attach='The New York Times',
                    args=[dir_for_files]
                ),
                TestCase(
                    stdin='nytimescom\nexit',
                    args=[dir_for_files]
                ),
                TestCase(
                    stdin='bloombergcom\nexit',
                    args=[dir_for_files]
                ),
            ]

        def _check_files(self, path_for_tabs: str, right_word: str) -> bool:
            """
            Helper which checks that browser saves visited url in files and
            provides access to them.

            :param path_for_tabs: directory which must contain saved tabs
            :param right_word: Word-marker which must be in right tab
            :return: True, if right_words is present in saved tab
            """

            path, dirs, filenames = next(os.walk(path_for_tabs))

            for file in filenames:
                print("file: {}".format(file))
                with open(os.path.join(path_for_tabs, file), 'r', encoding='utf-8') as tab:
                    content = tab.read()
                    print(content)
                    if 'html' in content and right_word in content:
                        return True

            return False

        def check(self, reply, attach):

            # Incorrect URL
            if attach is None:
                if '<p>' in reply:
                    return CheckResult.wrong('You haven\'t checked was URL correct')
                else:
                    return CheckResult.correct()

            # Correct URL
            if isinstance(attach, str):
                right_word = attach

                path_for_tabs = os.path.join(os.curdir, 'tb_tabs')

                if not os.path.isdir(path_for_tabs):
                    return CheckResult.wrong("There are no directory for tabs")

                if not self._check_files(path_for_tabs, right_word):
                    return CheckResult.wrong('There are no correct saved tabs')

                shutil.rmtree(path_for_tabs)

                if '<body' in reply and right_word in reply:
                    return CheckResult.correct()

                return CheckResult.wrong('You haven\'t print result of request')


    TextBasedBrowserTest('browser.browser').run_tests()
  learner_created: false
- name: browser/browser.py
  visible: true
  text: "import sys\nimport os\n\n\ndef is_valid_url(url):\n    return len(url.split('.'))\
    \ > 1\n\n\ndir_name = sys.argv[1]\ncurrent_path = os.getcwd()\ndir_path = current_path\
    \ + '\\\\' + dir_name\n\nif not os.path.exists(dir_path):\n    os.mkdir(dir_path)\n\
    \ncache = dict()\n\nnytimes_com = '''\nThis New Liquid Is Magnetic, and Mesmerizing\n\
    \nScientists have created “soft” magnets that can flow \nand change shape, and\
    \ that could be a boon to medicine \nand robotics. (Source: New York Times)\n\n\
    \nMost Wikipedia Profiles Are of Men. This Scientist Is Changing That.\n\nJessica\
    \ Wade has added nearly 700 Wikipedia biographies for\n important female and minority\
    \ scientists in less than two \n years.\n\n'''\n\nbloomberg_com = '''\nThe Space\
    \ Race: From Apollo 11 to Elon Musk\n\nIt's 50 years since the world was gripped\
    \ by historic images\n of Apollo 11, and Neil Armstrong -- the first man to walk\
    \ \n on the moon. It was the height of the Cold War, and the charts\n were filled\
    \ with David Bowie's Space Oddity, and Creedence's \n Bad Moon Rising. The world\
    \ is a very different place than \n it was 5 decades ago. But how has the space\
    \ race changed since\n the summer of '69? (Source: Bloomberg)\n\n\nTwitter CEO\
    \ Jack Dorsey Gives Talk at Apple Headquarters\n\nTwitter and Square Chief Executive\
    \ Officer Jack Dorsey \n addressed Apple Inc. employees at the iPhone maker’s\
    \ headquarters\n Tuesday, a signal of the strong ties between the Silicon Valley\
    \ giants.\n'''\n\n# write your code here\nuser_input = ''\n\nwhile True:\n   \
    \ user_input = input()\n\n    if user_input == 'exit':\n        break\n\n    if\
    \ is_valid_url(user_input):\n        path_to_file = dir_path + '\\\\' + user_input.split('.')[0]\
    \ + \".txt\"\n        with open(path_to_file, \"w\") as f:\n            if 'bloomberg'\
    \ in user_input:\n                f.writelines(bloomberg_com)\n              \
    \  print(bloomberg_com)\n            elif 'nytimes' in user_input:\n         \
    \       f.writelines(nytimes_com)\n                print(nytimes_com)\n      \
    \      else:\n                print(\"Error: Incorrect URL\")\n              \
    \  continue\n            cache[user_input.split('.')[0]] = path_to_file\n    elif\
    \ user_input in cache:\n        with open(cache[user_input], 'r') as f:\n    \
    \        for line in f:\n                print(line)\n    else:\n        print(\"\
    Error: Incorrect URL\")\n"
  learner_created: true
feedback_link: https://hyperskill.org/projects/79/stages/439/implement
status: Solved
record: 4
